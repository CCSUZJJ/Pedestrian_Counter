# We don't allow in-source builds.
if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
	if(NOT DEFINED WITH_IN_SOURCE_BUILD)
		message(FATAL_ERROR
			"CMake generation is not allowed within the source directory!"
			"\n Alternately define WITH_IN_SOURCE_BUILD to force this option (not recommended!)"
		)
	endif()
endif()

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake;${CMAKE_SOURCE_DIR}/../cmake;${CMAKE_SOURCE_DIR}/../../cmake;${CMAKE_SOURCE_DIR}/../../../cmake;${CMAKE_SOURCE_DIR}/../../../../cmake;${CMAKE_MODULE_PATH}")

enable_testing()
include(CTest)

if(WIN32)
	SET(ALL_PORTS Win32Desktop)
	SET(PORT "NoPort" CACHE STRING "choose which port to build (one of ${ALL_PORTS})")
else()
        SET(ALL_PORTS LinuxDesktop LinuxMx5 LinuxMx6 LinuxAtom LinuxAt91)
	SET(PORT "NoPort" CACHE STRING "choose which port to build (one of ${ALL_PORTS})")
endif()
SET_PROPERTY(CACHE PORT PROPERTY STRINGS ${ALL_PORTS})

LIST(FIND ALL_PORTS ${PORT} RET)
IF (${RET} EQUAL -1)
    MESSAGE(FATAL_ERROR "Please choose which port to build (one of ${ALL_PORTS})")
ENDIF ()

set(DEPENDS_ON_COMMON 1)
set(DEPENDS_ON_DESKTOP 0)
set(DEPENDS_ON_WIN32 0)
set(DEPENDS_ON_LINUX 0)
set(DEPENDS_ON_WIN32_COMMON 0)
set(DEPENDS_ON_WIN32_DESKTOP 0)
set(DEPENDS_ON_WIN32_EMBEDDED 0)
set(DEPENDS_ON_LINUX_COMMON 0)
set(DEPENDS_ON_LINUX_DESKTOP 0)
set(DEPENDS_ON_LINUX_EMBEDDED 0)    #For every buildroot build
set(DEPENDS_ON_LINUX_MX 0)
set(DEPENDS_ON_LINUX_MX5 0)
set(DEPENDS_ON_LINUX_MX6 0)
set(DEPENDS_ON_LINUX_ATOM 0)
set(DEPENDS_ON_LINUX_AT91 0)

if(PORT STREQUAL "Win32Desktop")
	set(DEPENDS_ON_WIN32 1)
    set(DEPENDS_ON_WIN32_COMMON 1)
	set(DEPENDS_ON_WIN32_DESKTOP 1)
	set(DEPENDS_ON_DESKTOP 1)
endif()

if(PORT STREQUAL "LinuxDesktop")
	set(DEPENDS_ON_LINUX 1)
    set(DEPENDS_ON_LINUX_COMMON 1)
	set(DEPENDS_ON_LINUX_DESKTOP 1)
	set(DEPENDS_ON_DESKTOP 1)
endif()

if(PORT STREQUAL "LinuxMx5")
	set(DEPENDS_ON_LINUX 1)
    set(DEPENDS_ON_LINUX_COMMON 1)
	set(DEPENDS_ON_LINUX_EMBEDDED 1)
	set(DEPENDS_ON_LINUX_MX 1)
	set(DEPENDS_ON_LINUX_MX5 1)
endif()

if(PORT STREQUAL "LinuxMx6")
	set(DEPENDS_ON_LINUX 1)
    set(DEPENDS_ON_LINUX_COMMON 1)
	set(DEPENDS_ON_LINUX_EMBEDDED 1)
	set(DEPENDS_ON_LINUX_MX 1)
	set(DEPENDS_ON_LINUX_MX6 1)
endif()

if(PORT STREQUAL "LinuxAtom")
	set(DEPENDS_ON_LINUX 1)
    set(DEPENDS_ON_LINUX_COMMON 1)
	set(DEPENDS_ON_LINUX_EMBEDDED 1)
	set(DEPENDS_ON_LINUX_ATOM 1)
endif()

if(PORT STREQUAL "LinuxAt91")
    set(DEPENDS_ON_LINUX 1)
    set(DEPENDS_ON_LINUX_COMMON 1)
    set(DEPENDS_ON_LINUX_EMBEDDED 1)
    set(DEPENDS_ON_LINUX_AT91 1)
endif()

############################
## COMPILER FLAGS
############################
if(CMAKE_COMPILER_IS_GNUCXX)
    if(DEPENDS_ON_LINUX)
        if(NOT CMAKE_CXX_FLAGS MATCHES "-fPIC")
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
        endif()
        if(NOT CMAKE_C_FLAGS MATCHES "-fPIC")
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
        endif()
    endif()
    if(NOT CMAKE_CXX_FLAGS MATCHES "-Wall")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -ansi -std=c++0x -pedantic -Winit-self -Wredundant-decls -Wundef -Wfloat-equal -Werror=return-type -Wmissing-include-dirs -Wswitch-enum -Wswitch-default -Wno-variadic-macros -Werror=missing-field-initializers -Wno-enum-compare")
    endif()
    if(NOT CMAKE_C_FLAGS MATCHES "-Wmissing-declarations")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-declarations")
    endif()
    if(NOT CMAKE_CXX_FLAGS_DEBUG MATCHES "-gdwarf-3")
      set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-3")
    endif()
    if(NOT CMAKE_C_FLAGS_DEBUG MATCHES "-gdwarf-3")
      set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -gdwarf-3")
    endif()
endif()
############################
## TRAFICON FUNCTIONS
############################
macro(traf_remove_flags flag)
    string(REPLACE "${flag}" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REPLACE "${flag}" "" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
endmacro(traf_remove_flags)

macro(traf_lib_use trafframework traflibrary)
    traf_private_add_lib(${trafframework} ${traflibrary} ${ARGV2})
	#search matching platform lib
    if(NOT ${trafframework} STREQUAL "platforms")
		unset(MYTRAFPREFIX)
		if(NOT ${ARGV2} STREQUAL "")
			set(MYTRAFPREFIX "${ARGV2}/")
		endif()
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}platforms/libs/${traflibrary}/CMakeLists.txt")
            traf_private_add_lib("platforms" ${traflibrary} ${ARGV2})
        endif()
	endif()
endmacro(traf_lib_use)

macro(traf_private_add_lib trafframework traflibrary)
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV2} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV2}/")
	endif()

    if(NOT TARGET "${trafframework}${traflibrary}")
                if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/libs/${traflibrary}")
                        add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/libs/${traflibrary}" "${CMAKE_BINARY_DIR}/${trafframework}/libs/${traflibrary}")
		endif()
    endif()
	if(TARGET ${SRC_TARGET} AND TARGET ${trafframework}${traflibrary})
                target_link_libraries(${SRC_TARGET} "${trafframework}${traflibrary}")
	endif()
endmacro()

macro(traf_start_test_application)
    find_program(GitProgram NAMES git git.exe PATHS "C:/Program Files/Git/bin" "C:/Program Files (x86)/Git/bin")
    if(NOT GitProgram)
        MESSAGE(FATAL_ERROR "traf_start_test_application: No git found on your system! ")
    else()
        set(FatTestDataPath "${CMAKE_CURRENT_SOURCE_DIR}/../../../fattestdata")

        string(FIND ${FatTestDataPath} "submodule" FindResult)

        if(FindResult EQUAL -1)
            if(NOT EXISTS "${FatTestDataPath}/.git" )
                execute_process(COMMAND "${GitProgram}" clone http://Public:World@stash.zone2.flir.net/scm/pub/fattestdata.git WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../" RESULT_VARIABLE GitResult)
                if(NOT GitResult EQUAL 0)
                        message(FATAL_ERROR "Could not clone http://Public:World@stash.zone2.flir.net/scm/pub/fattestdata.git result:${GitResult}")
                endif()
            endif()

            if(EXISTS "${FatTestDataPath}/.git" AND EXISTS "../../../cmake/SetFatTestDataShaId.cmake")
                include("../../../cmake/SetFatTestDataShaId.cmake")
                execute_process(COMMAND "${GitProgram}" log -1 --format=\"%H\" WORKING_DIRECTORY "${FatTestDataPath}" RESULT_VARIABLE GitResult OUTPUT_VARIABLE GitCommitId)

                if((GitResult EQUAL 0) AND (NOT ${GitCommitId} STREQUAL \"${FatTestDataShaId}\"\n))
                    execute_process(COMMAND "${GitProgram}" fetch WORKING_DIRECTORY "${FatTestDataPath}" RESULT_VARIABLE GitResult)
                    if(NOT GitResult EQUAL 0)
                        message(FATAL_ERROR "Could not fetch fat test data? result:${GitResult}")
                    endif()
                    execute_process(COMMAND "${GitProgram}" reset --hard ${FatTestDataShaId} WORKING_DIRECTORY "${FatTestDataPath}" RESULT_VARIABLE GitResult)
                    if(NOT GitResult EQUAL 0)
                        message(FATAL_ERROR "Could not checkout the test data Wrong commit id? result:${GitResult}")
                    endif()
                endif()
            endif()
	endif()
    endif()

    traf_private_start_application()
    # Add test specific libraries
    traf_lib_use("3rdparty" "UnitTest++" ${ARGV0})
    traf_lib_use("xstream" "Benchmarking" ${ARGV0})

    if(NOT DEPENDS_ON_DESKTOP)
        traf_add_include_directories("platforms/libs/Application/LinuxCommon/inc")
        traf_lib_use("platforms" "Application")
        traf_lib_use("platforms" "Hal")
        traf_lib_use("platforms" "Process")
        traf_lib_use("platforms" "FirmwareProgrammer")
    endif()
endmacro()

macro(traf_start_application)

    file(REMOVE "${CMAKE_BINARY_DIR}/RemoteTests.txt" "")
    traf_private_start_application()
endmacro()

macro(traf_private_start_application)
    traf_read_src_and_link()

    add_definitions(${TOTAL_DEFINES})

    if(TOTAL_SRC)
        add_executable(${SRC_TARGET} ${TOTAL_SRC})
        if(CMAKE_COMPILER_IS_GNUCXX)
			if(EXISTS "${PROJECT_BINARY_DIR}/pch/")
				include_directories("${PROJECT_BINARY_DIR}/pch/")
			endif()
			target_link_libraries(${SRC_TARGET} -Wl,-rpath,. -Wl,--start-group ${TOTAL_LINK} -Wl,--end-group -Wl,--start-group)
        else()
            target_link_libraries(${SRC_TARGET} ${TOTAL_LINK})
        endif()
    endif()
    traf_unset()
endmacro()

macro(traf_end_test_application)
    traf_end_application()
endmacro()

macro(traf_end_application)
    if(CMAKE_COMPILER_IS_GNUCXX)
        if(TARGET ${SRC_TARGET})
            target_link_libraries(${SRC_TARGET} -Wl,--end-group)
        endif()
    endif()
    traf_unset()
endmacro()

macro(traf_start_library_shared)
	project(${SRC_TARGET})
	traf_start_library("SHARED")
endmacro()

macro(traf_start_library)
    traf_read_src_and_link()
    add_definitions(${TOTAL_DEFINES})

    if(TOTAL_SRC)
	if("${ARGV0}" STREQUAL "SHARED")
	  add_library(${SRC_TARGET} SHARED ${TOTAL_SRC})
      if(WIN32)
        set(TRAF_BUILDING_SHARED_LIB ${SRC_TARGET})
      endif()
	else()
	  add_library(${SRC_TARGET} STATIC ${TOTAL_SRC})
	endif()
        if(CMAKE_COMPILER_IS_GNUCXX)
			if(EXISTS "${PROJECT_BINARY_DIR}/pch/")
				include_directories("${PROJECT_BINARY_DIR}/pch/")
			endif()
            target_link_libraries(${SRC_TARGET} -Wl,--start-group ${TOTAL_LINK} -Wl,--end-group -Wl,--start-group)
        else()
            target_link_libraries(${SRC_TARGET} ${TOTAL_LINK})
        endif()
    endif()
    traf_unset()
endmacro()

macro(traf_end_library)
    if(CMAKE_COMPILER_IS_GNUCXX)
        if(TARGET ${SRC_TARGET})
            target_link_libraries(${SRC_TARGET} -Wl,--end-group)
        endif()
    endif()
    if(WIN32)
      if(TRAF_BUILDING_SHARED_LIB STREQUAL ${SRC_TARGET})
        get_target_property(LIB_LOC ${SRC_TARGET} LOCATION)
        add_custom_command( TARGET ${SRC_TARGET}
                            POST_BUILD
                            COMMAND ${CMAKE_COMMAND}
                            ARGS -E copy ${LIB_LOC} "${CMAKE_BINARY_DIR}"
                            )
      endif()
    endif()
    traf_unset()
endmacro()

function(traf_add_include_directories trafdir)
    include_directories("../../../${trafdir}")
endfunction(traf_add_include_directories)

macro(traf_application_is_product)

    project(${SRC_TARGET})
	if(DEPENDS_ON_WIN32)
        traf_add_include_directories("platforms/libs/Application/Win32Common/inc") #TODO: move to inc directory
	elseif(DEPENDS_ON_LINUX)
        traf_add_include_directories("platforms/libs/Application/LinuxCommon/inc")
	endif()
    traf_private_add_lib("platforms" "Application")
    traf_private_add_lib("platforms" "Hal")
	if(NOT DEPENDS_ON_DESKTOP)
        traf_private_add_lib("platforms" "FirmwareProgrammer")
	endif()

	if(DEPENDS_ON_LINUX)
        traf_private_add_lib("platforms" "Process")
	endif()

    option(TRAF_OPTION_BUILD_OFFLINEGUI "Build and use OfflineGui when building the application" OFF)
    if(TRAF_OPTION_BUILD_OFFLINEGUI)
        traf_private_add_lib("detection" "ImageReader")
        traf_private_add_lib("tools" "OfflineGUI")
        traf_private_add_lib("tools" "OfflineGuiLib")
        traf_private_add_lib("tools" "FFMpegLib")
    endif()

    add_custom_target(version-${SRC_TARGET}
                      ${CMAKE_COMMAND} -D SRC=${CMAKE_SOURCE_DIR}/../../../xstream/inc/Application/ProductVersion.h.in
                                       -D DST=${CMAKE_CURRENT_BINARY_DIR}/generated/ProductVersion.h
                                       -D PRODUCT_VERSION=${PRODUCT_VERSION}
                                       -D DIR_CMAKE=${CMAKE_SOURCE_DIR}/../../../cmake
                                       -D TRAF_OPTION_OFFICIAL_RELEASE=${TRAF_OPTION_OFFICIAL_RELEASE}
                                       -P ${CMAKE_SOURCE_DIR}/../../../cmake/ProductVersion.cmake )
    add_dependencies(${SRC_TARGET} version-${SRC_TARGET})
    include_directories("${CMAKE_CURRENT_BINARY_DIR}/generated")

endmacro(traf_application_is_product)

function(traf_lib_include trafframework trafdir)
       # message("ARG: ${trafframework} - ${trafdir}")
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV2} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV2}/")
	endif()
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/inc/${trafdir}")
          #  message("Why: ${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/inc/${trafdir}")
                include_directories("../../../${MYTRAFPREFIX}${trafframework}/inc/${trafdir}")
	endif()
      #  message("Bingo: ${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/inc/${trafdir}")
endfunction(traf_lib_include)

function(submodule_git_init dir)
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV1} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV1}/")
	endif()
	if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${dir}/.git")
                set(GitHelpMessage "Run the following command manually: git submodule update --init ${dir}")
		if(WIN32)
			MESSAGE(FATAL_ERROR "Git automagic not working on windows for now! ${GitHelpMessage}")		
			#find_program(GitProgram NAMES "git.exe" HINTS "C:/Program Files (x86)/Git/bin" "C:/Program Files/Git/bin")
		else()
			find_program(GitProgram NAMES git)
		endif()
		if(GitProgram)
			execute_process(COMMAND "${GitProgram}" submodule update --init ${dir} WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}" RESULT_VARIABLE GitResult)
			if(NOT GitResult EQUAL 0)
				message(FATAL_ERROR "Could not update submodule ${dir}: result:${GitResult}")
			endif()			
		else()
			MESSAGE(FATAL_ERROR "No git found on your system! ${GitHelpMessage}")
		endif()
	endif()
endfunction(submodule_git_init dir)

function(submodule_lib_include dir)
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV1} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV1}/")
	endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}submodules/${dir}")
		submodule_git_init("submodules/${dir}" "${ARGV1}")
		include_directories("../../../${MYTRAFPREFIX}submodules/${dir}")
	endif()
endfunction(submodule_lib_include)

macro(traf_include_public_headers trafdir)
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../inc/${trafdir}")
        include_directories("${CMAKE_CURRENT_SOURCE_DIR}/../../inc/${trafdir}")
    endif()
endmacro(traf_include_public_headers)

macro(traf_set_public_headers trafdir)
    set(TRAF_INCLUDE_PUBLIC "../../inc/${trafdir}")
endmacro(traf_set_public_headers)

macro(traf_include_all_headers trafdir)
    traf_include_public_headers(${trafdir})
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${trafdir}/inc")
        include_directories(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${trafdir}/inc")
    endif()
    unset(MYEXTRA)
    if(NOT ${ARGV1} STREQUAL "")
        set(MYEXTRA "/${ARGV1}")
    endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${trafdir}${MYEXTRA}/src")
        include_directories(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${trafdir}${MYEXTRA}/src")
    endif()
endmacro(traf_include_all_headers)

macro(traf_test_headers)
    traf_lib_include("3rdparty" "UnitTest++" ${ARGV0})
    traf_lib_include("xstream" "Benchmarking" ${ARGV0})
endmacro(traf_test_headers)

macro(traf_set_location variablename location)
    if (DEPENDS_ON_DESKTOP)
        set(${variablename}_LOCATION "${location}")
    else()
        get_filename_component(TargetName  ${CMAKE_CURRENT_SOURCE_DIR} NAME)
        get_filename_component(TargetLoc  ${CMAKE_CURRENT_SOURCE_DIR} PATH)
        get_filename_component(TargetLoc  ${TargetLoc} PATH)
        get_filename_component(ComponentName  ${TargetLoc} NAME)

        set(${variablename}_LOCATION "/tmp/${ComponentName}/${TargetName}")
    endif()
    set(${variablename}_LOCATION_SEPARATOR "/")
    if(MSVC)
        string(REPLACE "/" "\\\\" ${variablename}_LOCATION "${${variablename}_LOCATION}")
        set(${variablename}_LOCATION_SEPARATOR "\\\\")
    endif()
endmacro(traf_set_location)

macro(traf_generate_header sourcelist inputfile)
    string(REGEX REPLACE "\\.in$" "" outputfile "${inputfile}")
    list(APPEND ${sourcelist} "${CMAKE_CURRENT_BINARY_DIR}/generated/${outputfile}")
    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/${inputfile}" "${CMAKE_CURRENT_BINARY_DIR}/generated/${outputfile}" ESCAPE_QUOTES)
endmacro(traf_generate_header)

macro(traf_include_generated_dir outputfiledir)
    include_directories("${CMAKE_CURRENT_BINARY_DIR}/generated/${outputfiledir}")
endmacro(traf_include_generated_dir)

macro(traf_add_test trafframework traflibrary)
    option(TRAF_OPTION_BUILD_TESTS "Build Tests when building the application" ON)
    option(TRAF_OPTION_BUILD_REMOTE_TESTS "Build Remote Tests when building the remote application" OFF)
    if(TRAF_OPTION_BUILD_TESTS)
        if(DEPENDS_ON_DESKTOP OR TRAF_OPTION_BUILD_REMOTE_TESTS)
            if(NOT TARGET "${trafframework}${traflibrary}Test")
                add_subdirectory("../../test/${traflibrary}" "${CMAKE_BINARY_DIR}/${trafframework}/test/${traflibrary}")                
                set(REMOTETEST "${CMAKE_BINARY_DIR}/${trafframework}/test/${traflibrary}/${trafframework}${traflibrary}Test")
                file(APPEND "${CMAKE_BINARY_DIR}/RemoteTests.txt" "${REMOTETEST}\n")
            endif()
        endif()
    endif()
endmacro(traf_add_test)

macro(traf_mocks_use trafframework traflibrary)
    traf_private_add_mocks(${trafframework} ${traflibrary} ${ARGV2})
endmacro(traf_mocks_use)


macro(traf_private_add_mocks trafframework traflibrary)
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV2} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV2}/")
	endif()

	if(NOT TARGET "${trafframework}${traflibrary}Mocks")
        if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/mocks/${traflibrary}")
            add_subdirectory("../../../${MYTRAFPREFIX}${trafframework}/mocks/${traflibrary}" "${CMAKE_BINARY_DIR}/${trafframework}/mocks/${traflibrary}")
		endif()
	endif()

	if(TARGET ${SRC_TARGET} AND TARGET ${trafframework}${traflibrary}Mocks)
        target_link_libraries(${SRC_TARGET} "${trafframework}${traflibrary}Mocks")
	endif()
endmacro(traf_private_add_mocks)

function(traf_mocks_include trafframework trafdir)
	unset(MYTRAFPREFIX)
	if(NOT ${ARGV2} STREQUAL "")
		set(MYTRAFPREFIX "${ARGV2}/")
	endif()
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../${MYTRAFPREFIX}${trafframework}/mocks/${trafdir}/src")
        include_directories("../../../${MYTRAFPREFIX}${trafframework}/mocks/${trafdir}/src")
	endif()
endfunction(traf_mocks_include)

macro(traf_parse_buildtype_vars base_var output_var)
    if(NOT "${${base_var}_DEBUG}" STREQUAL "")
        if(CMAKE_BUILD_TYPE STREQUAL "Debug")
            list(APPEND ${output_var} "${${base_var}_DEBUG}")
            set(${output_var} "${${output_var}}" PARENT_SCOPE)
        endif()
    endif()
    if(NOT "${${base_var}_RELEASE}" STREQUAL "")
        if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
            list(APPEND ${output_var} "${${base_var}_RELEASE}")
            set(${output_var} "${${output_var}}" PARENT_SCOPE)
        endif()
    endif()
endmacro(traf_parse_buildtype_vars)

function(traf_parse_vars output_var_src output_var_link output_var_defines known_vars)
    foreach(known_var ${known_vars})
        if("${DEPENDS_ON_${known_var}}")
            if(NOT "${SRC_${known_var}}" STREQUAL "")
                list(APPEND ${output_var_src} "${SRC_${known_var}}")
                set(${output_var_src} "${${output_var_src}}" PARENT_SCOPE)
            endif()
            traf_parse_buildtype_vars("SRC_${known_var}" ${output_var_src})
            if(NOT "${LINK_${known_var}}" STREQUAL "")
                list(APPEND ${output_var_link} "${LINK_${known_var}}")
                set(${output_var_link} "${${output_var_link}}" PARENT_SCOPE)
            endif()
            traf_parse_buildtype_vars("LINK_${known_var}" ${output_var_link})
            if(NOT "${SRC_DEFINES_${known_var}}" STREQUAL "")
                list(APPEND ${output_var_defines} "${SRC_DEFINES_${known_var}}")
                set(${output_var_defines} "${${output_var_defines}}" PARENT_SCOPE)
            endif()
            traf_parse_buildtype_vars("SRC_DEFINES_${known_var}" ${output_var_defines})
        endif()
    endforeach(known_var)
endfunction(traf_parse_vars)

function(traf_unset_vars output_var_src output_var_link output_var_defines known_vars)
    set(${output_var_src} "" PARENT_SCOPE)
    set(${output_var_link} "" PARENT_SCOPE)
    set(${output_var_defines} "" PARENT_SCOPE)
    foreach(known_var ${known_vars})
        set(SRC_${known_var} "" PARENT_SCOPE)
        set(SRC_${known_var}_RELEASE "" PARENT_SCOPE)
        set(SRC_${known_var}_DEBUG "" PARENT_SCOPE)
        set(LINK_${known_var} "" PARENT_SCOPE)
        set(LINK_${known_var}_RELEASE "" PARENT_SCOPE)
        set(LINK_${known_var}_DEBUG "" PARENT_SCOPE)
        set(SRC_DEFINES_${known_var} "" PARENT_SCOPE)
        set(SRC_DEFINES_${known_var}_RELEASE "" PARENT_SCOPE)
        set(SRC_DEFINES_${known_var}_DEBUG "" PARENT_SCOPE)
    endforeach(known_var)
endfunction(traf_unset_vars)

macro(traf_read_src_and_link)
    unset(TOTAL_SRC)
    unset(TOTAL_LINK)
    unset(TOTAL_DEFINES)
    traf_parse_vars(TOTAL_SRC TOTAL_LINK TOTAL_DEFINES
                "COMMON;WIN32;LINUX;WIN32_COMMON;LINUX_COMMON;WIN32_DESKTOP;LINUX_DESKTOP;WIN32_EMBEDDED;LINUX_EMBEDDED;WIN32_MX5;LINUX_MX;LINUX_MX5;LINUX_MX6;LINUX_ATOM;LINUX_AT91"
                )
endmacro()

macro(traf_unset)
    traf_unset_vars(TOTAL_SRC TOTAL_LINK TOTAL_DEFINES
                "COMMON;WIN32;LINUX;WIN32_COMMON;LINUX_COMMON;WIN32_DESKTOP;LINUX_DESKTOP;WIN32_EMBEDDED;LINUX_EMBEDDED;WIN32_MX5;LINUX_MX;LINUX_MX5;LINUX_MX6;LINUX_ATOM;LINUX_AT91"
                )
endmacro()

function(DownloadFat Name ShaId)
	set(Download 1)
	if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/.${Name}.shaid")
		file(READ "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/.${Name}.shaid" CurrentShaId)
		string(COMPARE NOTEQUAL ${CurrentShaId} ${ShaId} Download)
	endif()

	if(UNIX)
		set(ExtractCommand "tar")
		set(ExtractCommandParams "xvf")
	endif()
	if(WIN32)
		set(ExtractCommand "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/7za.exe")
		set(ExtractCommandParams "x" "-y")
		find_program(CurlProgram NAMES "curl.exe" HINTS "C:/Program Files (x86)/Git/bin" "C:/Program Files/Git/bin")
		if(NOT CurlProgram)
			message(FATAL_ERROR "Could not find the curl.exe program!")
		endif()
		if(NOT EXISTS ${ExtractCommand})
			file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat")
            set(Url "http://stash.zone2.flir.net/projects/PUB/repos/fat/browse/7za.exe?at=f7763ed0eb3db691c88223b34f273b1f92c93d87&raw")
			set(CurlParams "-u" "Public:World" "${Url}")
			set(DownloadCode 1)
			execute_process(COMMAND ${CurlProgram} ${CurlParams} RESULT_VARIABLE DownloadCode OUTPUT_FILE "${ExtractCommand}")
			if(NOT DownloadCode EQUAL 0)
                message(FATAL_ERROR "Could not download 7za.exe extraction utility from the Fat repo!")
			endif()
		endif()
	endif()
	
	if(Download)                
		string(REPLACE "+" "%2B" TarName ${Name})	# replace + in url with %2B                
		set(Url "http://stash.zone2.flir.net/projects/PUB/repos/fat/browse/${TarName}.tar.gz?at=${ShaId}&raw")
		set(CurlParams "-u" "Public:World" "${Url}")
		set(DownloadCode 1)
		file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/")
		if(WIN32)
			execute_process(COMMAND ${CurlProgram} ${CurlParams} RESULT_VARIABLE DownloadCode OUTPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/${Name}.tar.gz")
		else()
	                execute_process(COMMAND curl ${CurlParams} RESULT_VARIABLE DownloadCode OUTPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/${Name}.tar.gz")
		endif()
		if(DownloadCode EQUAL 0)
			file(REMOVE_RECURSE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/bin/${Name}")
			file(REMOVE_RECURSE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/lib/${Name}")
			file(REMOVE_RECURSE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/inc/${Name}")

			execute_process(COMMAND ${ExtractCommand} ${ExtractCommandParams} ${Name}.tar.gz WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat" RESULT_VARIABLE ExtractCode)
			if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/${Name}.tar")
				execute_process(COMMAND ${ExtractCommand} ${ExtractCommandParams} ${Name}.tar WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat" RESULT_VARIABLE ExtractCode)
			endif()
			if(NOT ExtractCode EQUAL 0)
				message(FATAL_ERROR "Can not extract ${Name}!!")
			else()
				file(REMOVE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/${Name}.tar.gz")
				file(REMOVE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/${Name}.tar")
				file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/../../../fat/.${Name}.shaid" ${ShaId})
			endif()
		else()
			message(FATAL_ERROR "Can't download ${Name} with ShaId ${ShaId}! ${DownloadStatus}")
		endif()
	endif()
endfunction(DownloadFat)

function(GetCurrentDate date)
    if(UNIX)
        set(DateProgram "date")
    endif()
    if(WIN32)
        find_program(DateProgram NAMES "date.exe" HINTS "C:/Program Files (x86)/Git/bin" "C:/Program Files/Git/bin")
        if(NOT DateProgram)
            message(FATAL_ERROR "Could not find the date.exe program!")
        endif()
    endif()
    execute_process(COMMAND ${DateProgram} "+%Y.%m.%d" RESULT_VARIABLE DateCode OUTPUT_VARIABLE DateOutput)
    string(STRIP "${DateOutput}" DateOutput)
    if(DateCode EQUAL 0)
        set(${date} "${DateOutput}" PARENT_SCOPE)
    else()
        set(${date} "" PARENT_SCOPE)
    endif()
endfunction(GetCurrentDate)

#give date param in "YYYY.mm.dd"
macro(traf_unittest_will_fail_until unittest date)
    GetCurrentDate(NOW)
    if(NOW)
        if(${NOW} VERSION_LESS ${date})
            set_property(TEST ${unittest} PROPERTY WILL_FAIL 1)
        endif()
    endif()
endmacro(traf_unittest_will_fail_until)

macro(traf_use_as_pch SrcList HeaderPath PchHeaderName)
	set(PchHeaderDir "${PROJECT_BINARY_DIR}/pch/")
	set(PchHeaderPath "${PchHeaderDir}/${PchHeaderName}.gch")
	list(APPEND ${SrcList} "${PchHeaderPath}")
    set(ExtraArgs ${CMAKE_CXX_FLAGS})
	list(APPEND ExtraArgs -c "${CMAKE_CURRENT_SOURCE_DIR}/${HeaderPath}" -o "${PchHeaderPath}")
    get_directory_property(IncDirs INCLUDE_DIRECTORIES)
    foreach(IncDir ${IncDirs})
	list(APPEND ExtraArgs "-I" ${IncDir})
    endforeach()
    separate_arguments(ExtraArgs)
	include_directories("${PchHeaderDir}")

	add_custom_command(
		OUTPUT "${PchHeaderPath}"
		COMMAND ${CMAKE_COMMAND} -E echo "${PchHeaderPath}"
		COMMAND mkdir -p "${PchHeaderDir}"
		COMMAND rm -f "${PchHeaderPath}"
		COMMAND ${CMAKE_CXX_COMPILER} ${CMAKE_CXX_COMPILER_ARG1} ${ExtraArgs}
		DEPENDS ${HeaderPath}
	)
endmacro(traf_use_as_pch)

macro(traf_tixwebapp appname)
    option(TRAF_OPTION_BUILD_TIXWEBAPP "Build Tix web app when building the application" ON)
    if(TRAF_OPTION_BUILD_TIXWEBAPP)
        unset(MYTRAFPREFIX)
        if(NOT ${ARGV1} STREQUAL "")
            set(MYTRAFPREFIX "${ARGV1}/")
        endif()
        if(NOT TARGET "TixWebApp")
            set(TRAF_CURRENT_TIXWEBAPP ${appname})
            submodule_git_init("submodules/TixWebApp" "${ARGV1}")
            add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/../../../submodules/TixWebApp" "${CMAKE_BINARY_DIR}/TixWebApp")
            add_dependencies(${SRC_TARGET} TixWebApp)
        endif()
    endif()
endmacro()
